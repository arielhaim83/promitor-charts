# Default values for promitor-agent-scraper.
# This is a YAML-formatted file.

replicaCount: 1

nameOverride: ""
fullnameOverride: ""

imageAcrUrl: &imageAcrUrl wdatpacreus.azurecr.io
  
image:
  acrUrl: *imageAcrUrl
  repository: wdatpacreus.azurecr.io/mgmt.promitor.scraper
  pullPolicy: Always
  pullSecrets: []
  tag: "20221020.3"

azureAuthentication:
  appId: "" # [Deprecated] Prefer identity.id
  appKey: "" # [Deprecated] Prefer identity.key
  mode: "ServicePrincipal"
  identity:
    id: c510fce5-b26b-4e58-b2ca-273820274ec6
    key: "" #P._8Q~hOPZukKSLpR87tFx~nXGLOd2c8P4QSwbup
    appKeySecretFilePath: /vault-folder/secrets
    appKeySecretName: wcd-vsts-stg-sp
    binding: ""

azureMetadata:
  tenantId: 72f988bf-86f1-41af-91ab-2d7cd011db47
  subscriptionId: c5d1c552-a815-4fc8-b12d-ab444e3225b1
  cloud: Global
  resourceGroupName: promitor

metricSinks:
  atlassianStatuspage:
    enabled: false
    pageId: ""
    apiKey: ""
    systemMetricMapping: []
    # - id: <atlassian-statuspage-system-metric-id>
    #   promitorMetricName: <promitor-metric-name>
  prometheusScrapingEndpoint:
    enabled: true
    baseUriPath: /metrics
    enableMetricTimestamps: true
    metricUnavailableValue: NaN
    labelTransformation: None
    enableServiceDiscovery: true
    serviceMonitor:
      enabled: false
      namespace: ""
      labels: {}
      interval: 60s
      timeout: 10s
      metricRelabelings: []
      relabelings: []
  statsd:
    enabled: true
    host: "localhost"
    port: 8125    
    namespace: "WCDSTGM365DSRE"
    account: "WCDStaging"
    formattertype: "custom"

prometheusRule:
  enabled: false
  namespace: ""
  additionalLabels: {}
  rules: []
    # Sample rule below. Can also use templated strings with some limitations regarding possible line length: https://github.com/go-yaml/yaml/issues/166
    # To prevent Helm from messing up the rules on fields > 80 characters you can use yaml literal style as shown below.
    #  - alert: PromitorRemainingArmCalls
    #    expr: |
    #      promitor_ratelimit_arm{service="{{ template "promitor-agent-scraper.name" . }}"} < 11999
    #    for: 5m
    #    labels:
    #      severity: warning
    #    annotations:
    #      description: |
    #        Service {{ template "promitor-agent-scraper.name" . }} currently reports {{ "{{ $value }}" }} remaining calls before Azure Resource Manager throttles us.
    #      summary: Azure Resource Manager may throttle us soon.

    ## Metric Declaration YAML
metricDefaults:
  aggregation:
    interval: 00:01:00
  limit: 10
  scraping:
    schedule: "*/3 * * * *"
metrics: 
  - name: azure_storage_account_capacity
    description: "The average capacity used in the storage account"
    resourceType: StorageAccount    
    azureMetricConfiguration:
        metricName: UsedCapacity
        aggregation:
          type: Average          
  #   resources:
  #     - accountName: abvc        
    resourceDiscoveryGroups:
    - name: storage-accounts-landscape
      description: "Goal nefesh"
# Sample metric configuration below
#   - name: demo_queue_size
#     description: "Amount of active messages of the 'myqueue' queue (determined with ServiceBusQueue provider)"
#     resourceType: ServiceBusQueue
#     azureMetricConfiguration:
#       metricName: ActiveMessages
#       aggregation:
#         type: Total
#         interval: 00:15:00
#     resources:
#       - namespace: promitor-messaging
#         queueName: orders

resourceDiscovery:
  enabled: true
  host: "mgmt-promitor"
  port: 8889

telemetry:
  defaultLogLevel: "Error"
  applicationInsights:
    enabled: false
    key: ""
    logLevel: ""
  containerLogs:
    enabled: true
    logLevel: ""

deployment:
  env:
    extra: []
    # - name: AZURE_STORAGE_QUEUE_SAS_TOKEN
    #   valueFrom:
    #     secretKeyRef:
    #       name: azure-storage-queue
    #       key: sas-token

secrets:
  # To use your own secret, set createSecret to false and define the name/keys that your secret uses
  createSecret: true
  secretName: ""
  appKeySecret: azure-app-key
  atlassianStatuspageApiKey: atlassian-statuspage-apikey
  extra: {}

service:
  port: 8888
  ## By default this pod is running as a non-root user.
  ## If you choose targetPort <1024 it will fail to start.
  targetPort: 5000
  loadBalancer:
    enabled: false
    azure:
      dnsPrefix:
      exposeInternally: false

health:
  readiness:
    enabled: false
    verifyDependencies: false
    delay: 5
    interval: 5
    timeoutSeconds: 1
    thresholds:
      failure: 3
      success: 1
  liveness:
    enabled: false
    verifyDependencies: false
    delay: 5
    interval: 30
    timeoutSeconds: 1
    thresholds:
      failure: 3
      success: 1

affinity: {}

podLabels: {}

annotations: {}

priorityClassName: ""

resources: 
  limits:
   cpu: 500m
   memory: 1024Mi
  requests:
   cpu: 500m
   memory: 1024Mi

## Role-based access control
## https://kubernetes.io/docs/reference/access-authn-authz/rbac/
rbac:
  ## If true, create & use RBAC resources
  create: true

  ## If true, create & use Pod Security Policy resources
  ## ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/
  podSecurityPolicyEnabled: false

  ## Service Account for pods
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  serviceAccount:
    ## Specifies whether a service account should be created
    create: true

    ## The name of the service account to use if create is false
    ## If create is true, a name is generated using the fullname template
    name: promitor-scraper
    annotations: {}

    ## Set this to true if you plan on using Pod Security Policy
    automountServiceAccountToken: false

nodeSelector: {}

## securityContext and containerSecurityContext are using secure defaults.
## Only override if you have a good reason to.
securityContext:
  enabled: true
  runAsGroup: 10000
  runAsNonRoot: true
  runAsUser: 10000
  seccompProfile:
    type: RuntimeDefault

containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  enabled: true
  privileged: false
  readOnlyRootFilesystem: true

tolerations: []

## Pass extra volumeMounts to the promitor container
extraVolumeMounts: []
  # - name: secrets-store-inline
  #   mountPath: "/mnt/promitor-secrets"
  #   readOnly: true

## Pass extra volumes to the promitor deployment
extraVolumes: []
  # - name: secrets-store-inline
  #   csi:
  #       driver: secrets-store.csi.k8s.io
  #       readOnly: true
  #       volumeAttributes:
  #         secretProviderClass: "promitor-secrets"

environment: Staging

# The image master_20220207-nc.1 just has `nc` over the image supplied by Geneva
# highThroughputPipeline:
#   logs:
#     mdsd:
#       secrets: pfx-Geneva-STG::gcscert.pem:gcskey.pem
#     gcs:
#       account: WCDStaging
#       environment: FirstPartyProd

highThroughputPipeline:
  imageName: "wdatp.infra.eventsreader"
  imageTag: "20211218.1-d285ec723a95970419f42a32ea52a44e201c20e2"
  # ! required by user !
  # genevaMdmNamespace: GenevaMdmNamespace
  # ! required by user !
  # The following should be the name of the dll that you are monitoring
  # AppName: myApp.dll
  metrics:
    enabled: false
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 200m
        memory: 256Mi
    circularBufferMB: 256
    appendMetricDisplayUnits: false
  logs:
    enabled: false
    mdsd:
      secrets: pfx-Geneva-STG::gcscert.pem:gcskey.pem
      imageName: genevamdsd
      imageTag: master_20220614.1-nc
      # resources can be tuned. These values should handle 15k logs/s
      resources:
        limits:
          cpu: 1500m
          memory: 4Gi
        requests:
          cpu: 1500m
          memory: 4Gi
      backPressureBufferSizeInMB: 4096
    gcs:
      account: WCDStaging
      environment: FirstPartyProd
    # secrets: common and set in /values folders
    # ! required by user !
    # gcs:
    #   namespace:
    #   version:
keyvault:
  enabled: true
  vaultUrl: https://mgmt-runtime-stg-eus.vault.azure.net/
  acskeyvaultagent:
    image:
      name: wdatp.infra.keyvaultagent
      tag: "20220410.2-375ce8621bbe0c5f9ece38e6dcd61436d9f92c5e"
  mountPath: /vault-folder
  volumeName: vault-folder
  clusterServicePrincipalPath: /etc/kubernetes/azure.json 
  downloadCaCertificates: false
  timeout: "60"
  secrets: 
  - wcd-vsts-stg-sp

###
# MDM
###

mdm:
  account: "WCDStaging"
  secrets: pfx-Geneva-STG::mdm-cert.pem:mdm-key.pem
  acrUrl: *imageAcrUrl
  enabled: true
  imageName: genevamdm
  imageTag: master_20220614.1-nc
  resources:
    limits:
      cpu: 200m
      memory: 100Mi
    requests:
      cpu: 100m
      memory: 100Mi
  protocol: "ifx_tcp,statsd_udp"
  port: 11013

podIdentity:
  enabled: false
